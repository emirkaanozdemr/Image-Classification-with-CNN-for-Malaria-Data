# -*- coding: utf-8 -*-
"""Image Classification with CNN for Malaria Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z2Y5lPibew2DCsrUPjN9b0fL8qeSc-xT

# **Image Classification with CNN for Malaria Data**

In this project I will predict whether a cell is infected or uninfected from Malaria Dataset. I am going to use CNN-Keras for this mission. My data has 27650 pictures and 2 classes.
"""

import pandas as pd
import os

#I am unziping the dataset
from google.colab import files

import zipfile

uploaded = files.upload()

for zip_filename in uploaded.keys():
    with zipfile.ZipFile(zip_filename, 'r') as zip_ref:
        zip_ref.extractall('Cell_Image_Dataset')

#I am writing the path of the images
#I am writing the labels
labels=["Parasitized","Uninfected"]
img_path="/content/Cell_Image_Dataset/cell_images/"

#I am reading the images paths and labels
img_list=[]
label_list=[]
for label in labels:
    for img_file in os.listdir(img_path+label):
        img_list.append(img_path+label+'/'+img_file)
        label_list.append(label)

#I am inserting the paths and labels in a dataframe
df=pd.DataFrame({'img':img_list,'label':label_list})

df.head()

df.shape

#I am encoding the labels
d={'Parasitized':1,'Uninfected':0}

df["encoded_label"]=df["label"].map(d)

#From ChatGPT
#That is the code to resize the images to 170x170
#It can understand that can the data resize and normalize
#If the image is not readable, it won't be in x list.
import cv2
import pandas as pd
import os

x = []
processed_paths = []

for img_path in df["img"]:
    try:
        img = cv2.imread(str(img_path))
        if img is None:
            raise FileNotFoundError(f"{img_path} file didn't read.")

        img = cv2.resize(img, (170, 170))
        img = img / 255.0
        x.append(img)
        processed_paths.append(img_path)
    except Exception as e:
        print(f"Error: {e}")

        if os.path.exists(img_path):
            os.remove(img_path)
        else:
            print(f"Attention: {img_path} file has already been deleted or cannot be found.")

#I am converting the list to an array
x=np.array(x)

#I am creating my target
y=df["encoded_label"]

#I am finding the image index of the unread
df[df["img"]=="/content/Cell_Image_Dataset/cell_images/Parasitized/Thumbs.db"]

#I am deleting it from the target
y.drop(12910, inplace=True)

#I am finding the image index of the unread
df[df["img"]=="/content/Cell_Image_Dataset/cell_images/Uninfected/Thumbs.db"]

#I am deleting it from the target
y.drop(26615, inplace=True)

from sklearn.model_selection import train_test_split

#Train test split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

"""# **Modelling**"""

from keras.models import Sequential
from keras.layers import Conv2D, Dense, Flatten, Input, MaxPooling2D, Dropout, BatchNormalization

#My model is a convolutional neural network
#I am using 5 convolutional layers
#I am using 3 maxpooling layers
#I am using 2 dense layers
model=Sequential()
model.add(Input(shape=(170,170,3)))
model.add(Conv2D(32,kernel_size=(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(50,kernel_size=(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(68,kernel_size=(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(90,kernel_size=(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(100,kernel_size=(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(128))
model.add(Dense(2, activation='softmax'))
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

history=model.fit(x_train,y_train,epochs=15,validation_data=(x_test,y_test))

#I am saving my model
model.save("my_malaria_prediction_model.h5")

"""To conclusion I can say that the model is good. It works and predicts very well. You can find data here [Original Website](https://ceb.nlm.nih.gov/repositories/malaria-datasets/
) or [Kaggle](https://www.kaggle.com/datasets/iarunava/cell-images-for-detecting-malaria)
"""

